// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Attendee {
  id         Int     @id @default(autoincrement())
  firstName  String?
  lastName   String?
  email      String
  documentId String?
  phone      String?

  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([documentId])
}

model TicketType {
  id              Int    @id @default(autoincrement())
  name            String
  price           Int
  ticketsIncluded Int    @default(1)

  tickets Ticket[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id             Int    @id @default(autoincrement())
  attendeeId     Int
  ticketTypeId   Int
  redemptionCode String?

  attendee   Attendee   @relation(fields: [attendeeId], references: [id])
  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MoneyAccount {
  id          Int    @id @default(autoincrement())
  accountType String
  userId      String @unique

  user             User               @relation(fields: [userId], references: [id])
  fromTransactions MoneyTransaction[] @relation("fromTransactions")
  toTransactions   MoneyTransaction[] @relation("toTransactions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MoneyTransaction {
  id            Int @id @default(autoincrement())
  amount        Int
  fromAccountId Int
  toAccountId   Int

  fromAccount MoneyAccount @relation("fromTransactions", fields: [fromAccountId], references: [id])
  toAccount   MoneyAccount @relation("toTransactions", fields: [toAccountId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]

  moneyAccount MoneyAccount?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
